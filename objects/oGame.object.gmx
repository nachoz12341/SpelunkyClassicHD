<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Game
drawStatus = 0;
moneyCount = 0;
globalvar debug;
debug = false;
global.ghostExists = false;

paused = false;
damsel = false;
idol = false;
altar = false;

// Black Market
genClothingShop = false;
genBombShop = false;
genSupplyShop = false;
genRareShop = false;
genWeaponShop = false;

if (instance_number(oGame) &gt; 1) instance_destroy();

moveableSolidGrav = 1; // how fast moveable solids should accelerate downwards
time = 1;

// sound_loop(sndMusicTest);

if (global.gameStart) scrInitLevel();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Menu
menuItemIndex = 0;

//Debug
if (global.debugBuild) instance_create(0, 0, oDebug);

if (global.html5Build) {
    if (global.mobileBuild) {
        maxIndexTitle = 7;
        maxIndexGame = 5;
    } else {
        maxIndexTitle = 8;
        maxIndexGame = 6;
    }
} else {
    maxIndexTitle = 6;
    maxIndexGame = 5;
}

firstMenuItemTitleY = (240 - global.fontSmallHeight - 20 * maxIndexTitle) / 2;
firstMenuItemGameY = (240 - global.fontSmallHeight - 20 * maxIndexGame) / 2;

//Left analog stick in the menu
global.analogLDownPreviousState = false;
global.analogLUpPreviousState = false;
global.analogLDownPressed = false;
global.analogLUpPressed = false;

//for HTML5
localeChanged = false;
changeSprites = false;

//Gamepad in HTML5
instance_create(0, 0, oHtml5Gamepad);
global.bStartPressed = false;
global.bStartPreviousState = false;
global.bJumpPressed = false;
global.bJumpPressedPreviousState = false;
global.bJumpReleased = false;
global.bJumpReleasedPreviousState = false;
global.bAttackPressed = false;
global.bAttackPressedPreviousState = false;
global.bAttackReleased = false;
global.bAttackReleasedPreviousState = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gamepad in HTML5
global.bStartPressed = false;
global.bJumpPressed = false;
global.bJumpReleased = false;
global.bAttackPressed = false;
global.bAttackReleased = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left analog stick in the menu
global.analogLDownPressed = false;
global.analogLUpPressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.udjatBlink = not global.udjatBlink;

if (global.hasUdjatEye)
{
    if (global.udjatBlink)
        playSound(global.sndBlink1);
    else
        playSound(global.sndBlink2);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (drawStatus &lt; 3) drawStatus = 3;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (drawStatus &lt; 3) drawStatus = 2;
alarm[1] = 50;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>gameStepEvent</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not instance_exists(oXMarket)) global.udjatBlink = false;
else
{
    with oPlayer1
    {
        dm = distance_to_object(oXMarket);
        if (dm &lt; 4) dm = 4;
        if (oGame.alarm[2] &lt; 1 or dm &lt; oGame.alarm[2]) oGame.alarm[2] = dm;
    }
}

if (global.gameStart and instance_exists(oCharacter) and isLevel())
{
    if (not oCharacter.dead)
    {
        global.time += room_speed;
        global.xtime += room_speed;
    }
}

// GHOST
if (instance_exists(oPlayer1))
{
    if (isLevel() and not isRoom("rOlmec") and not isRoom("rLoadLevel") and global.currLevel &gt; 1 and
        not global.hasCrown and global.xtime &gt; 120000 and
        oPlayer1.sprite_index != sPExit and oPlayer1.sprite_index != sDamselExit)
    {
        if (not oLevel.musicFade)
        {
            oLevel.musicFade = true;
            global.message = tr("A CHILL RUNS UP YOUR SPINE...");
            global.message2 = tr("LET'S GET OUT OF HERE!");
            global.messageTimer = 200;
        }
    }
    
    if (isLevel() and not isRoom("rOlmec") and not isRoom("rLoadLevel") and global.currLevel &gt; 1 and
        not global.hasCrown and global.xtime &gt; 150000 and not global.ghostExists and
        oPlayer1.sprite_index != sPExit and oPlayer1.sprite_index != sDamselExit)
    {
        if (oPlayer1.x &gt; room_width / 2) instance_create(view_xview[0]+view_wview[0]+8, view_yview[0]+floor(view_hview[0] / 2), oGhost);
        else instance_create(view_xview[0]-32,  view_yview[0]+floor(view_hview[0] / 2), oGhost);
        global.ghostExists = true;
    }
}

if (global.checkWater)
{
    global.waterCounter = 0;
    with oWater
    {
        // if (y &gt; view_yview[0]-32 and y &lt; view_yview[0] + view_hview[0]+32 and not isRoom("rOlmec"))
        if (not isRoom("rOlmec"))
        {
            if ((!isRoom("rLoadLevel") and y &lt; 512) or isRoom("rLoadLevel"))
            {
        
            instance_activate_region(x-16, y-16, 48, 48, true);
        
            if (not collision_point(x, y-16, oSolid, 0, 0) and not collision_point(x, y-16, oWater, 0, 0))
            {
                if (type == "Lava") sprite_index = sLavaTop;
                else sprite_index = sWaterTop;
            }
            
            obj = instance_place(x-16, y, oWater);
            if (instance_exists(obj))
            {
                if (obj.sprite_index == sWaterTop or obj.sprite_index == sLavaTop)
                {
                    if (type == "Lava") sprite_index = sLavaTop;
                    else sprite_index = sWaterTop;
                }
            }
            
            obj = instance_place(x+16, y, oWater);
            if (instance_exists(obj))
            {
                if (obj.sprite_index == sWaterTop or obj.sprite_index == sLavaTop)
                {
                    if (type == "Lava") sprite_index = sLavaTop;
                    else sprite_index = sWaterTop;
                }
            }
            
            if ((not collision_point(x-16, y, oSolid, 0, 0) and not collision_point(x-16, y, oWater, 0, 0)) or
                (not collision_point(x+16, y, oSolid, 0, 0) and not collision_point(x+16, y, oWater, 0, 0)) or
                (not collision_point(x, y+16, oSolid, 0, 0) and not collision_point(x, y+16, oWater, 0, 0))) 
            {
                instance_destroy();
                global.waterCounter += 1;
            }
            
            global.waterLoopSafety += 1;
            if (global.waterLoopSafety &gt; 100000) global.checkWater = false;
            
            }
        }
    }
    
    if (global.waterCounter == 0) global.checkWater = false;
}
else
{
    global.waterLoopSafety = 0;
}

// game over
if (instance_exists(oPlayer1))
{
    if (oPlayer1.dead)
    {
        if (drawStatus == 0)
        {
            alarm[0] = 50;
            drawStatus += 1;
        }
        if (drawStatus &gt; 2)
        {
            moneyDiff = global.money - moneyCount;
            if (moneyDiff &gt; 1000)
                moneyCount += 1000;
            else if (moneyDiff &gt; 100)
                moneyCount += 100;
            else
                moneyCount += moneyDiff;
       }
    }
}

// GAMEPAD PAUSE
if (gamepad_button_check_pressed(global.joyid, global.joyStartVal)) event_perform(ev_keypress, vk_escape);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gamepad in HTML5

if (global.html5Build) {
    //Start
    if (html5_gamepad_button_check(global.joyid, global.joyStartVal)) {
        if (global.bStartPreviousState == false) {
            global.bStartPressed = true;
            global.bStartPreviousState = true;
        }
    } else {
        global.bStartPreviousState = false;
    }
    //Jump
    if (html5_gamepad_button_check(global.joyid, global.joyJumpVal)) {
        global.bJumpReleasedPreviousState = false;
        if (global.bJumpPressedPreviousState == false) {
            global.bJumpPressed = true;
            global.bJumpPressedPreviousState = true;
        }
    } else {
        global.bJumpPressedPreviousState = false;
        if (global.bJumpReleasedPreviousState == false) {
            global.bJumpReleased = true;
            global.bJumpReleasedPreviousState = true;
        }
    }
    //Attack
    if (html5_gamepad_button_check(global.joyid, global.joyAttackVal)) {
        global.bAttackReleasedPreviousState = false;
        if (global.bAttackPressedPreviousState == false) {
            global.bAttackPressed = true;
            global.bAttackPressedPreviousState = true;
        }
    } else {
        global.bAttackPressedPreviousState = false;
        if (global.bAttackReleasedPreviousState == false) {
            global.bAttackReleased = true;
            global.bAttackReleasedPreviousState = true;
        }
    }
    /*
    //Item
    if (html5_gamepad_button_check(global.joyid, global.joyItemVal)) {
        if (global.bItemPreviousState == false) {
            global.bItemPressed = true;
            global.bItemPreviousState = true;
        }
    } else {
        global.bItemPreviousState = false;
    }
    //Bomb
    if (html5_gamepad_button_check(global.joyid, global.joyBombVal)) {
        if (global.bBombPreviousState == false) {
            global.bBombPressed = true;
            global.bBombPreviousState = true;
        }
    } else {
        global.bBombPreviousState = false;
    }
    //Run
    if (html5_gamepad_button_check(global.joyid, global.joyRunVal)) {
        if (global.bRunPreviousState == false) {
            global.bRunPressed = true;
            global.bRunPreviousState = true;
        }
    } else {
        global.bRunPreviousState = false;
    }
    //Rope
    if (html5_gamepad_button_check(global.joyid, global.joyRopeVal)) {
        if (global.bRopePreviousState == false) {
            global.bRopePressed = true;
            global.bRopePreviousState = true;
        }
    } else {
        global.bRopePreviousState = false;
    }
    //Flare
    if (html5_gamepad_button_check(global.joyid, global.joyFlareVal)) {
        if (global.bFlarePreviousState == false) {
            global.bFlarePressed = true;
            global.bFlarePreviousState = true;
        }
    } else {
        global.bFlarePreviousState = false;
    }
    //Pay
    if (html5_gamepad_button_check(global.joyid, global.joyPayVal)) {
        if (global.bPayPreviousState == false) {
            global.bPayPressed = true;
            global.bPayPreviousState = true;
        }
    } else {
        global.bPayPreviousState = false;
    }
    */
    alarm[4] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left analog stick and dpad in the menu

if (!global.html5Build) {
    var downPressed = gamepad_axis_value(global.joyid, gp_axislv) &gt; 0.6;
    var upPressed = gamepad_axis_value(global.joyid, gp_axislv) &lt; -0.6;
} else {
    var downPressed = ((html5_gamepad_axis_value(global.joyid, 1) &gt; 0.6) or
            (html5_gamepad_axis_value(global.joyid, 5) &gt; 0.6));
    var upPressed = (html5_gamepad_axis_value(global.joyid, 1) &lt; -0.6 or
            (html5_gamepad_axis_value(global.joyid, 5) &lt; -0.6));
}

if (downPressed) {
    if (global.analogLDownPreviousState == false) {
        global.analogLDownPressed = true;
        global.analogLDownPreviousState = true;
    }
} else {
    global.analogLDownPreviousState = false;
}
if (upPressed) {
    if (global.analogLUpPreviousState == false) {
        global.analogLUpPressed = true;
        global.analogLUpPreviousState = true;
    }
} else {
    global.analogLUpPreviousState = false;
}
alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Fix" the jump touch button and jump keyboard key on Android
if (instance_exists(oPlayer1)) {
    if (keyboard_check(ord('J'))) {
        oPlayer1.initialJumpAcc = -4;
    } else if (global.mobileBuild and keyboard_check(global.keyJumpVal)) {
        oPlayer1.initialJumpAcc = -4;
    } else if (!global.mobileBuild and keyboard_check(global.keyJumpVal)) {
        oPlayer1.initialJumpAcc = -2;
    } else {    
        if (!global.html5Build) {
            if (gamepad.jump or
                    gamepad_button_check(global.joyid, global.joyJumpVal) or
                    (gamepad_button_value(global.joyid, global.joyJumpVal) &gt; 0.6)) {
                oPlayer1.initialJumpAcc = -2;
            }
        } else {
            if (html5_gamepad_button_check(global.joyid, global.joyJumpVal)) {
                oPlayer1.initialJumpAcc = -2;
            }
    
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check input in the menu

//Pause

if (keyboard_check_pressed(global.keyStartVal) or
        keyboard_check_pressed(vk_escape) or
        global.bStartPressed or
        gamepad_button_check_pressed(global.joyid, global.joyStartVal)) {
    if (not isRoom("rIntro")) {
        if (not paused) {
            instance_deactivate_all(true);
            audio_pause_all();
            paused = true;
        } else {
            paused = false;
            instance_activate_all();
            audio_resume_all();

            // Fix player falling through floor in html5 version
            if (global.html5Build and instance_exists(oPlayer1)) {
                oPlayer1.y -= 1;
            }
        }
    }
}

if (paused) {
    if (checkDownPressed()) {
        menuItemIndex += 1;
        if (isRoom("rTitle")) {
            if (menuItemIndex &gt; maxIndexTitle) menuItemIndex = 0;
        } else { 
            if (menuItemIndex &gt; maxIndexGame) menuItemIndex = 0;
        }
    } else if (checkUpPressed()) {
        menuItemIndex -= 1;
        if (isRoom("rTitle")) {
            if (menuItemIndex &lt; 0) menuItemIndex = maxIndexTitle;
        } else {
            if (menuItemIndex &lt; 0) menuItemIndex = maxIndexGame;
        }
    } else if (checkJumpPressed()) {
        paused = false;
        instance_activate_all();
    } else if (checkAttackPressed()) or (keyboard_check_pressed(global.keyEnter)) {
        if (isRoom("rTitle")) {
            switch (menuItemIndex) {
                case 0: {
                    toggleMusic();
                    if (paused) audio_pause_all();
                    break;
                }
                case 1: {
                    instance_activate_all();
                    room_goto(rKeyConfig);
                    break;
                }
                case 2: {               
                    if (global.html5Build) {
                        global.joyid = html5_gamepad_next(global.joyid);
                    } else {
                        paused = false;
                        instance_activate_all();
                        room_goto(rJoyConfig);
                    }
                    break;
                }
                case 3: {
                    if (global.html5Build) {
                        paused = false;
                        instance_activate_all();
                        room_goto(rJoyConfigHtml5);
                     } else {
                        global.toggleRunEnabled = !global.toggleRunEnabled;
                     }
                    break;
                }
                case 4: {
                    if (global.html5Build) {
                        menuTouchControls();
                    } else if (global.mobileBuild) {
                            menuTouchControls();
                    } else {
                        menuToggleFullscreen();
                    }
                    break;
                }
                case 5: {
                    if (global.html5Build) {
                        global.toggleRunEnabled = !global.toggleRunEnabled;
                    } else {
                        menuLanguage();
                    }
                    break;
                }
                case 6: {
                    if (global.html5Build) {
                        if (global.mobileBuild) {
                            menuLanguage();
                        } else {
                            menuToggleFullscreen();
                        }
                    } else {
                        if (global.mobileBuild) {
                            instance_activate_all();
                            audio_stop_all();
                            game_restart();
                        } else {
                            quitGame();
                        }
                    }
                    break;
                }
                case 7: {
                    if (global.mobileBuild) {
                        instance_activate_all();
                        audio_stop_all();
                        game_restart();
                    } else {
                        menuLanguage();
                    }
                    break;
                }
                case 8: {
                    if (global.electronBuild) {
                        quitGame();
                    } else if (global.browserBuild) {
                        instance_activate_all();
                        audio_stop_all();
                        game_restart();
                    }
                    break;
                }
            }
        } else {
            switch (menuItemIndex) {
                case 0: {
                    toggleMusic();
                    if (paused) audio_pause_all();
                    break;
                }
                case 1: {
                    if (global.html5Build) {
                        menuTouchControls();
                    } else {
                        global.toggleRunEnabled = !global.toggleRunEnabled;
                    }
                    break;
                }
                case 2: {
                    if (global.html5Build) {
                        global.toggleRunEnabled = !global.toggleRunEnabled;
                    } else {
                        if (global.mobileBuild) {
                            menuTouchControls();
                        } else {
                            menuToggleFullscreen();
                        }
                    }
                    break;
                }
                case 3: {
                    if (global.html5Build) {
                        if (global.mobileBuild) {
                            menuLanguage();
                        } else {
                            menuToggleFullscreen();
                        }
                    } else {
                        if (global.mobileBuild) {
                            menuLanguage();
                        } else {
                            menuLanguage();
                        }
                    }
                    break;
                }
                case 4: {
                    if (global.html5Build) {
                        if (global.mobileBuild) {
                            menuDie();
                        } else {
                            menuLanguage();
                        }
                    } else {
                        if (global.mobileBuild) {
                            menuDie();
                        } else {
                            menuDie();
                        }
                    }
                    break;
                }
                case 5: {
                    if (global.html5Build) {
                        if (global.mobileBuild) {
                            instance_activate_all();
                            audio_stop_all();
                            game_restart();
                        } else {
                            menuDie();
                        }
                    } else {
                        if (global.mobileBuild) {
                            instance_activate_all();
                            audio_stop_all();
                            game_restart();
                        } else {
                            quitGame();
                        }
                    }
                    break;
                }
                case 6: {
                    if (global.browserBuild) {
                        instance_activate_all();
                        audio_stop_all();
                        game_restart();
                    } else {
                        quitGame();
                    }
                    break;
                }
            }
        }
        configSave()
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change locale (HTML5)
if (global.html5Build) {
    if (localeChanged) {
        setLocale();
        localeChanged = false;
    }
    if (!paused) and (changeSprites) {
        loadLocalizedSprites();
        changeSprites = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///saveStats
scrWriteStats();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause menu
if (paused) {
    color0 = c_white;
    color1 = c_white;
    color2 = c_white;
    color3 = c_white;
    color4 = c_white;
    color5 = c_white;
    color6 = c_white;
    color7 = c_white;
    color8 = c_white;
    switch (menuItemIndex) {
        case 0: { color0 = c_yellow; break; }
        case 1: { color1 = c_yellow; break; }
        case 2: { color2 = c_yellow; break; }
        case 3: { color3 = c_yellow; break; }
        case 4: { color4 = c_yellow; break; }
        case 5: { color5 = c_yellow; break; }
        case 6: { color6 = c_yellow; break; }
        case 7: { color7 = c_yellow; break; }
        case 8: { color8 = c_yellow; break; }
    }

    if (global.music) {
        strMusic = tr("ON");
    } else {
        strMusic = tr("OFF");
    }
    if (global.fullscreen) {
        strFullscreen = tr("ON");
    } else {
        strFullscreen = tr("OFF");
    }
    if (global.toggleRunEnabled) {
        strToggleRunEnabled = tr("ON");
    } else {
        strToggleRunEnabled = tr("OFF");
    }

    strLocaleName = string_upper(global.localesMap[? global.locale]);

    if (isRoom("rTitle")) {
        if (global.html5Build) {
            drawTextHCentered(tr('MUSIC') + ' &lt;' + strMusic + '&gt;', 'small', color0, 0, firstMenuItemTitleY);
            drawTextHCentered(tr('KEYBOARD CONFIGURATION'), 'small', color1, 0, firstMenuItemTitleY+20);
            drawTextHCentered(tr('GAMEPAD') + ' &lt;' + string(global.joyid) + '&gt;', 'small', color2, 0, firstMenuItemTitleY+40);
            drawTextHCentered(tr('GAMEPAD CONFIGURATION'), 'small', color3, 0, firstMenuItemTitleY+60);
            drawTextHCentered(tr('TOUCH CONTROLS VISIBILITY') + ' &lt;' + string(global.touchControlsVisibility) + '&gt;', 'small', color4, 0, firstMenuItemTitleY+80);
            drawTextHCentered(tr('TOGGLEABLE RUN BUTTON') + ' &lt;' + strToggleRunEnabled + '&gt;', 'small', color5, 0, firstMenuItemTitleY+100);
            if (global.mobileBuild) {
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color6, 0, firstMenuItemTitleY+120);
                drawTextHCentered(tr('RESTART'), 'small', color7, 0, firstMenuItemTitleY+140);
            } else if (global.browserBuild) {
                drawTextHCentered(tr('TOGGLE FULLSCREEN'), 'small', color6, 0, firstMenuItemTitleY+120);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color7, 0, firstMenuItemTitleY+140);
                drawTextHCentered(tr('RESTART'), 'small', color8, 0, firstMenuItemTitleY+160);
            //} else if (global.electronBuild) {
            } else {        
                drawTextHCentered(tr('FULLSCREEN') + ' &lt;' + strFullscreen + '&gt;', 'small', color6, 0, firstMenuItemTitleY+120);    
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color7, 0, firstMenuItemTitleY+140);
                drawTextHCentered(tr('QUIT'), 'small', color8, 0, firstMenuItemTitleY+160);
            }
        } else {
            drawTextHCentered(tr('MUSIC') + ' &lt;' + strMusic + '&gt;', 'small', color0, 0, firstMenuItemTitleY);
            drawTextHCentered(tr('KEYBOARD CONFIGURATION'), 'small', color1, 0, firstMenuItemTitleY+20);
            drawTextHCentered(tr('GAMEPAD CONFIGURATION'), 'small', color2, 0, firstMenuItemTitleY+40);
            drawTextHCentered(tr('TOGGLEABLE RUN BUTTON') + ' &lt;' + strToggleRunEnabled + '&gt;', 'small', color3, 0, firstMenuItemTitleY+60);
            if (global.mobileBuild) {
                drawTextHCentered(tr('TOUCH CONTROLS VISIBILITY') + ' &lt;' + string(global.touchControlsVisibility) + '&gt;', 'small', color4, 0, firstMenuItemTitleY+80);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color5, 0, firstMenuItemTitleY+100);
                drawTextHCentered(tr('RESTART'), 'small', color6, 0, firstMenuItemTitleY+120);
            } else {
                drawTextHCentered(tr('FULLSCREEN') + ' &lt;' + strFullscreen + '&gt;', 'small', color4, 0, firstMenuItemTitleY+80);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color5, 0, firstMenuItemTitleY+100);
                drawTextHCentered(tr('QUIT'), 'small', color6, 0, firstMenuItemTitleY+120);
            }
        }
    } else {
        if (global.html5Build) {
            drawTextHCentered(tr('MUSIC') + ' &lt;' + strMusic + '&gt;', 'small', color0, 0, firstMenuItemGameY);
            drawTextHCentered(tr('TOUCH CONTROLS VISIBILITY') + ' &lt;' + string(global.touchControlsVisibility) + '&gt;', 'small', color1, 0, firstMenuItemGameY+20);
            drawTextHCentered(tr('TOGGLEABLE RUN BUTTON') + ' &lt;' + strToggleRunEnabled + '&gt;', 'small', color2, 0, firstMenuItemGameY+40);
            if (global.mobileBuild) {
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color3, 0, firstMenuItemGameY+60);
                drawTextHCentered(tr('DIE!'), 'small', color4, 0, firstMenuItemGameY+80);
                drawTextHCentered(tr('RESTART'), 'small', color5, 0, firstMenuItemGameY+100);
            } else if (global.browserBuild) {
                drawTextHCentered(tr('TOGGLE FULLSCREEN'), 'small', color3, 0, firstMenuItemGameY+60);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color4, 0, firstMenuItemGameY+80);
                drawTextHCentered(tr('DIE!'), 'small', color5, 0, firstMenuItemGameY+100);
                drawTextHCentered(tr('RESTART'), 'small', color6, 0, firstMenuItemGameY+120);
            //} else if (global.electronBuild) {
            } else {
                drawTextHCentered(tr('FULLSCREEN') + ' &lt;' + strFullscreen + '&gt;', 'small', color3, 0, firstMenuItemGameY+60);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color4, 0, firstMenuItemGameY+80);
                drawTextHCentered(tr('DIE!'), 'small', color5, 0, firstMenuItemGameY+100);
                drawTextHCentered(tr('QUIT'), 'small', color6, 0, firstMenuItemGameY+120);
            }
        } else {
            drawTextHCentered(tr('MUSIC') + ' &lt;' + strMusic + '&gt;', 'small', color0, 0, firstMenuItemGameY);
            drawTextHCentered(tr('TOGGLEABLE RUN BUTTON') + ' &lt;' + strToggleRunEnabled + '&gt;', 'small', color1, 0, firstMenuItemGameY+20);
            if (global.mobileBuild) {
                drawTextHCentered(tr('TOUCH CONTROLS VISIBILITY') + ' &lt;' + string(global.touchControlsVisibility) + '&gt;', 'small', color2, 0, firstMenuItemGameY+40);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color3, 0, firstMenuItemGameY+60);
                drawTextHCentered(tr('DIE!'), 'small', color4, 0, firstMenuItemGameY+80);
                drawTextHCentered(tr('RESTART'), 'small', color5, 0, firstMenuItemGameY+100);
            } else {
                drawTextHCentered(tr('FULLSCREEN') + ' &lt;' + strFullscreen + '&gt;', 'small', color2, 0, firstMenuItemGameY+40);
                drawTextHCentered(tr('LANGUAGE') + ' &lt;' + strLocaleName + '&gt;', 'small', color3, 0, firstMenuItemGameY+60);
                drawTextHCentered(tr('DIE!'), 'small', color4, 0, firstMenuItemGameY+80);
                drawTextHCentered(tr('QUIT'), 'small', color5, 0, firstMenuItemGameY+100);
            }
        }
    }
    if (global.html5Build) drawTouchControls();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TouchInput
if ((global.mobileBuild) or (global.html5Build)) {
    enableTouchInput();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD

display_set_gui_size(global.display_w,global.display_h);
if (!global.html5Build) {
    scrDrawHUD();
    if (global.mobileBuild) {
        drawTouchControls();
    }
    showMessages();
    /*
    if (global.messageTimer &gt; 0) {
        y1 = 216 + 8 - global.fontSmallHeight;
        y2 = y1 + global.fontSmallHeight;
        drawMessage(global.message, 'small', c_white, 0, y1, 1);
        if (not isRoom("rTutorial")) {
            drawMessage(global.message2, 'small', c_yellow, 0, y2, 2);
        } else {
            drawMessage(global.message2, 'small', c_white, 0, y2, 2);
        }
        global.messageTimer -= 1;
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oPlayer1))
{
    if (oPlayer1.dead or isRoom("rMoon"))
    {
        if (isLevel())
        {
            if (drawStatus &gt; 0)
            {
                drawTextHCentered(tr("GAME OVER"), 'large', c_yellow, view_xview[0], view_yview[0]+32+16);
            }
            if (drawStatus &gt; 1)
            {
                drawTextHCentered(tr("FINAL SCORE:"), 'small', c_yellow, view_xview[0], view_yview[0]+64+16);
            }
            if (drawStatus &gt; 2)
            {
                drawTextHCentered("$" + string(moneyCount), 'large', c_white, view_xview[0], view_yview[0]+72+16);
                if (global.customLevel)
                {
                    if (global.testLevel != "")
                    {
                        if (global.gamepadOn) str = tr("PRESS ") + scrGetJoy(global.joyAttackVal) + tr(" TO EDIT LEVEL.");
                        else str = tr("PRESS ") + scrGetKey(global.keyAttackVal) + tr(" TO EDIT LEVEL.");
                    }
                    else
                    {
                        if (global.gamepadOn) str = tr("PRESS ") + scrGetJoy(global.joyAttackVal) + tr(" TO LOAD ANOTHER LEVEL.");
                        else str = tr("PRESS ") + scrGetKey(global.keyAttackVal) + tr(" TO LOAD ANOTHER LEVEL.");
                    }
                    drawTextHCentered(str, 'small', c_yellow, view_xview[0], view_yview[0]+120);
                }
                else
                {
                    if (global.gamepadOn) str = tr("PRESS ") + scrGetJoy(global.joyAttackVal) + tr(" FOR HIGH SCORES.");
                    else str = tr("PRESS ") + scrGetKey(global.keyAttackVal) + tr(" FOR HIGH SCORES.");
                    drawTextHCentered(str, 'small', c_yellow, view_xview[0], view_yview[0]+120);
                }
            }
        }
        else if (isRoom("rSun"))
        {
            if (drawStatus &gt; 0)
            {
                drawTextHCentered(tr("FINISHED!"), 'large', c_yellow, view_xview[0], view_yview[0]+32+16);
            }
            if (drawStatus &gt; 1)
            {
                if (oSunRoom.highscore) str = tr("YOU SET A NEW RECORD!");
                else str = tr("BETTER LUCK NEXT TIME...");
                drawTextHCentered(str, 'small', c_yellow, view_xview[0], view_yview[0]+64+16);
            }
        }
        else if (isRoom("rMoon"))
        {
            if (oMoonRoom.timer &lt; 0)
            {
                if (drawStatus &gt; 0)
                {
                    drawTextHCentered(tr("FINISHED!"), 'large', c_yellow, view_xview[0], view_yview[0]+32+16);
                }
                if (drawStatus &gt; 1)
                {
                    if (oMoonRoom.highscore) str = tr("YOU SET A NEW RECORD!");
                    else str = tr("BETTER LUCK NEXT TIME...");
                    drawTextHCentered(str, 'small', c_yellow, view_xview[0], view_yview[0]+64+16);
                }
            }
        }
        else if (isRoom("rStars"))
        {
            if (drawStatus &gt; 0)
            {
                drawTextHCentered(tr("FINISHED!"), 'large', c_yellow, view_xview[0], view_yview[0]+32+16);
            }
            if (drawStatus &gt; 1)
{
                if (oStarsRoom.highscore) str = tr("YOU SET A NEW RECORD!");
                else str = tr("BETTER LUCK NEXT TIME...");
                drawTextHCentered(str, 'small', c_yellow, view_xview[0], view_yview[0]+64+16);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUGGING TEXT

// Display level path
if (false and room == rLevel)
{
    for (j = 0; j &lt; 4; j += 1)
    {
        for (i = 0; i &lt; 4; i += 1)
        {
            draw_text(oPlayer1.x+48+i*16, oPlayer1.y-64+16+j*16, string(global.roomPath[i,j]));
        }
    }
}

if (false and instance_exists(oPlayer1))
{
    file = file_text_open_read(working_directory + "stats.txt");

    if (file)
    {
    file_text_readln(file);
    file_text_readln(file);
    file_text_readln(file);
    file_text_readln(file);
    str = file_text_read_string(file);
    str = string_delete(str, 1, 20);
    global.totalCrates = real(str);
    file_text_readln(file);
    str = file_text_read_string(file);
    // str = string_delete(str, 1, 20);
    // global.totalChests = real(str);
        
    draw_text(oPlayer1.x+16, oPlayer1.y-16, str);
        
    file_text_close(file);
    }
}

if (false and instance_exists(oPlayer1))
{
    draw_set_font(global.fontSmall);
    draw_set_color(c_white);
    draw_text(oPlayer1.x+16, oPlayer1.y-16, string(oPlayer1.stunTimer));
    // if (instance_exists(oLockedChest)) { with oPlayer1 { draw_text(x+16, y-32, distance_to_object(oLockedChest)); } }
    // else { draw_text(oPlayer1.x+16, oPlayer1.y-16, "0"); }
    //if (global.madeMoai == true) draw_text(oPlayer1.x+16, oPlayer1.y-16, "TRUE");
    //else draw_text(oPlayer1.x+16, oPlayer1.y-16, "FALSE");
    //draw_text(oPlayer1.x+16, oPlayer1.y-16, string_upper(global.pickupItem));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>-100</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw_text(oPlayer1.x-24, oPlayer1.y-48, string(radtodeg(arctan(1))));

// DEBUG

if (false and room == rLevel and instance_exists(oXMarket))
{
draw_text(oPlayer1.x-24, oPlayer1.y-48, string(oPlayer1.x-oXMarket.x));
draw_text(oPlayer1.x, oPlayer1.y-48, string(oPlayer1.y-oXMarket.y));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD (HTML5)
if (global.html5Build) {
    scrDrawHUD();
    drawTouchControls();
    showMessages();
    /*
    if (global.messageTimer &gt; 0) {
        y1 = view_yview[0] + 216 + 8 - global.fontSmallHeight;
        y2 = y1 + global.fontSmallHeight;
        drawMessage(global.message, 'small', c_white, view_xview[0], y1, 1);
        if (not isRoom("rTutorial")) {
            drawMessage(global.message2, 'small', c_yellow, view_xview[0], y2, 2);
        } else {
            drawMessage(global.message2, 'small', c_white, view_xview[0], y2, 2);
        }
        global.messageTimer -= 1;
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//toggleMusic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start = false;
startPressed = false;
startReleased = false;

left = false;
leftPressed = false;
leftReleased = false;

right = false;
rightPressed = false;
rightReleased = false;

up = false;
upPressed = false;
upReleased = false;

down = false;
downPressed = false;
downReleased = false;

jump = false;
jumpPressed = false;
jumpReleased = false;
jump_button = false;

attack = false;
attackPressed = false;
attackReleased = false;

item = false;
itemPressed = false;
itemReleased = false;

run = false;

bomb = false;
bombPressed = false;
bombReleased = false;

rope = false;
ropePressed = false;
ropeReleased = false;

flare = false;
flarePressed = false;
flareReleased = false;

pay = false;
payPressed = false;
payReleased = false;

select = false;

count=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do gamepad stuff.

if (!global.gamepadOn) exit;

/////////////
// START
/////////////

startReleased = false;
startPressed = false;
if (start)
{
    if (scrNotTrigger(global.joyStartVal))
        start = gamepad_button_check(global.joyid, global.joyStartVal);
    else
        start = gamepad_button_value(global.joyid, global.joyStartVal) &gt; 0.6;
        
    if (not start) startReleased = true;
}
else
{
    if (scrNotTrigger(global.joyStartVal))
        start = gamepad_button_check(global.joyid, global.joyStartVal);
    else
        start = gamepad_button_value(global.joyid, global.joyStartVal) &gt; 0.6;
        
    if (start) startPressed = true;
}

/////////////
// LEFT
/////////////

leftReleased = false;
leftPressed = false;
if (left)
{
    left = (gamepad_button_check(global.joyid, gp_padl) || gamepad_axis_value(global.joyid, gp_axislh) &lt; -0.6);

    if (not left) leftReleased = true;
}
else
{
    left = (gamepad_button_check(global.joyid, gp_padl) || gamepad_axis_value(global.joyid, gp_axislh) &lt; -0.6);
    
    if (left) leftPressed = true;
}

/////////////
// RIGHT
/////////////

rightReleased = false;
rightPressed = false;
if (right)
{
    right = (gamepad_button_check(global.joyid, gp_padr) || gamepad_axis_value(global.joyid, gp_axislh) &gt; 0.6);

    if (not right) rightReleased = true;
}
else
{
    right = (gamepad_button_check(global.joyid, gp_padr) || gamepad_axis_value(global.joyid, gp_axislh) &gt; 0.6);
    
    if (right) rightPressed = true;
}

/////////////
// UP
/////////////

upReleased = false;
upPressed = false;
if (up)
{
    up = (gamepad_button_check(global.joyid, gp_padu) || gamepad_axis_value(global.joyid, gp_axislv) &lt; -0.6);

    if (not up) upReleased = true;
}
else
{
    up = (gamepad_button_check(global.joyid, gp_padu) || gamepad_axis_value(global.joyid, gp_axislv) &lt; -0.6);
    
    if (up) upPressed = true;
}

/////////////
// DOWN
/////////////

downReleased = false;
downPressed = false;
if (down)
{
    down = (gamepad_button_check(global.joyid, gp_padd) || gamepad_axis_value(global.joyid, gp_axislv) &gt; 0.6);

    if (not down) downReleased = true;
}
else
{
    down = (gamepad_button_check(global.joyid, gp_padd) || gamepad_axis_value(global.joyid, gp_axislv) &gt; 0.6);
    
    if (down) downPressed = true;
}

/////////////
// JUMP
/////////////

jumpReleased = false;
jumpPressed = false;
if (jump)
{
    if (scrNotTrigger(global.joyJumpVal))
        jump = gamepad_button_check(global.joyid, global.joyJumpVal);
    else
        jump = gamepad_button_value(global.joyid, global.joyJumpVal) &gt; 0.6;
    
    if (not jump) jumpReleased = true;
}
else
{
    if (scrNotTrigger(global.joyJumpVal))
        jump = gamepad_button_check(global.joyid, global.joyJumpVal);
    else
        jump = gamepad_button_value(global.joyid, global.joyJumpVal) &gt; 0.6;
    
    if (jump) jumpPressed = true;
}

/////////////
// ATTACK
/////////////

attackReleased = false;
attackPressed = false;
if (attack)
{
    if (scrNotTrigger(global.joyAttackVal))
        attack = gamepad_button_check(global.joyid, global.joyAttackVal);
    else
        attack = gamepad_button_value(global.joyid, global.joyAttackVal) &gt; 0.6;
    
    if (not attack) attackReleased = true;
}
else
{
    if (scrNotTrigger(global.joyAttackVal))
        attack = gamepad_button_check(global.joyid, global.joyAttackVal);
    else
        attack = gamepad_button_value(global.joyid, global.joyAttackVal) &gt; 0.6;
    
    if (attack) attackPressed = true;
}

////////////
// ITEM
////////////

itemReleased = false;
itemPressed = false;
if (item)
{
    if (scrNotTrigger(global.joyItemVal))
        item = gamepad_button_check(global.joyid, global.joyItemVal);
    else
        item = gamepad_button_value(global.joyid, global.joyItemVal) &gt; 0.6;
    
    if (not item) itemReleased = true;
}
else
{
    if (scrNotTrigger(global.joyItemVal))
        item = gamepad_button_check(global.joyid, global.joyItemVal);
    else
        item = gamepad_button_value(global.joyid, global.joyItemVal) &gt; 0.6;
    
    if (item) itemPressed = true;
}

////////////
// RUN
////////////

if (scrNotTrigger(global.joyRunVal))
    run = gamepad_button_check(global.joyid, global.joyRunVal);
else
    run = gamepad_button_value(global.joyid, global.joyRunVal) &gt; 0.6;

////////////
// BOMB
////////////

bombReleased = false;
bombPressed = false;
if (bomb)
{
    if (scrNotTrigger(global.joyBombVal))
        bomb = gamepad_button_check(global.joyid, global.joyBombVal);
    else
        bomb = gamepad_button_check(global.joyid, global.joyBombVal) &gt; 0.6;
    
    if (not bomb) bombReleased = true;
}
else
{
    if (scrNotTrigger(global.joyBombVal))
        bomb = gamepad_button_check(global.joyid, global.joyBombVal);
    else
        bomb = gamepad_button_check(global.joyid, global.joyBombVal) &gt; 0.6;
    
    if (bomb) bombPressed = true;
}

////////////
// ROPE
////////////

ropeReleased = false;
ropePressed = false;
if (rope)
{
    if (scrNotTrigger(global.joyRopeVal))
        rope = gamepad_button_check(global.joyid, global.joyRopeVal);
    else
        rope = gamepad_button_value(global.joyid, global.joyRopeVal) &gt; 0.6;
    
    if (not rope) ropeReleased = true;
}
else
{
    if (scrNotTrigger(global.joyRopeVal))
        rope = gamepad_button_check(global.joyid, global.joyRopeVal);
    else
        rope = gamepad_button_value(global.joyid, global.joyRopeVal) &gt; 0.6;
    
    if (rope) ropePressed = true;
}

////////////
// FLARE
////////////

flareReleased = false;
flarePressed = false;
if (flare)
{
    if (scrNotTrigger(global.joyFlareVal))
        flare = gamepad_button_check(global.joyid, global.joyFlareVal);
    else
        flare = gamepad_button_value(global.joyid, global.joyFlareVal) &gt; 0.6;
    
    if (not flare) flareReleased = true;
}
else
{
    if (scrNotTrigger(global.joyFlareVal))
        flare = gamepad_button_check(global.joyid, global.joyFlareVal);
    else
        flare = gamepad_button_value(global.joyid, global.joyFlareVal) &gt; 0.6;
    
    if (flare) flarePressed = true;
}

////////////
// PAY
////////////

payReleased = false;
payPressed = false;
if (pay)
{
    if (scrNotTrigger(global.joyPayVal))
        pay = gamepad_button_check(global.joyid, global.joyPayVal);
    else
        pay = gamepad_button_value(global.joyid, global.joyPayVal) &gt; 0.6;
    
    if (not pay) payReleased = true;
}
else
{
    if (scrNotTrigger(global.joyPayVal))
        pay = gamepad_button_check(global.joyid, global.joyPayVal);
    else
        pay = gamepad_button_value(global.joyid, global.joyPayVal) &gt; 0.6;
    
    if (pay) payPressed = true;
}

////////////
// SELECT
////////////
select = gamepad_button_check_pressed(global.joyid, gp_select);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect new gamepads.

var ev_type = ds_map_find_value(async_load, "event_type");
var pad_ind = ds_map_find_value(async_load, "pad_index");

if (ev_type == "gamepad discovered")
{
    global.gamepadOn = true;
    //global.joyid = pad_ind;
    gamepad_set_button_threshold(global.joyid, 1); // we need this to be pretty high, as analogue triggers are treated like analogue triggers and not like buttons!
}
else
{
    global.gamepadOn = false;
    global.joyid = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
